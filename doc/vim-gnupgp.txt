*vim-gnupgp* GPG (and PGP) vim integration                    *vim-gnupgp.txt*

Integrated encrypt/decrypt and management of GNU gpg files

==============================================================================
CONTENTS                                           *vim-gnupgp-contents*

   1. INTRODUCTION                                      |vim-gnupgp-intro|
   2. COMMANDS                                       |vim-gnupgp-commands|
   3. CONFIGURATION                             |vim-gnupgp-configuration|
   4. KNOWN ISSUES                                     |vim-gnupgp-issues|
   4. CREDITS                                         |vim-gnupgp-credits|

==============================================================================
1. INTRODUCTION                                           *vim-gnupgp-intro*

This script implements transparent editing of gpg encrypted files. The
filename must have a ".gpg", ".pgp" or ".asc" suffix. When opening such
a file the content is decrypted, when opening a new file the script will
ask for the recipients of the encrypted file. The file content will be
encrypted to all recipients before it is written. The script turns off
viminfo, swapfile, and undofile to increase security.

==============================================================================
2. COMMANDS                                            *vim-gnupgp-commands*

:GPGEditRecipients                                      *GPGEditRecipients*
  Opens a scratch buffer to change the list of recipients. Recipients that
  are unknown (not in your public key) are highlighted and have
  a prepended "!". Closing the buffer makes the changes permanent.

:GPGViewRecipients                                      *GPGViewRecipients*
  Prints the list of recipients.

:GPGEditOptions                                         *GPGEditOptions*
  Opens a scratch buffer to change the options for encryption (symmetric,
  asymmetric, signing). Closing the buffer makes the changes permanent.
  WARNING: There is no check of the entered options, so you need to know
  what you are doing.

:GPGViewOptions                                         *GPGViewOptions*
  Prints the list of options.


==============================================================================
3. CONFIGURATION                                  *vim-gnupgp-configuration*

g:GPGExecutable
  If set used as gpg executable. If unset, defaults to
  "gpg --trust-model always" if "gpg" is available, falling back to
  "gpg2 --trust-model always" if not.

g:GPGUseAgent
  If set to 0 a possible available gpg-agent won't be used. Defaults to 1.

g:GPGPreferSymmetric
  If set to 1 symmetric encryption is preferred for new files. Defaults to 0.

g:GPGPreferArmor
  If set to 1 armored data is preferred for new files. Defaults to 0
  unless a "*.asc" file is being edited.

g:GPGPreferSign
  If set to 1 signed data is preferred for new files. Defaults to 0.

g:GPGDefaultRecipients
  If set, these recipients are used as defaults when no other recipient is
  defined. This variable is a Vim list. Default is unset.

g:GPGPossibleRecipients
  If set, these contents are loaded into the recipients dialog. This
  allows to add commented lines with possible recipients to the list,
  which can be uncommented to select the actual recipients. Default is
  unset. Example:

    let g:GPGPossibleRecipients=[
      \"Example User <example@example.com>",
      \"Other User <otherexample@example.com>"
    \]


g:GPGUsePipes
  If set to 1, use pipes instead of temporary files when interacting with
  gnupg.  When set to 1, this can cause terminal-based gpg agents to not
  display correctly when prompting for passwords.  Defaults to 0.

g:GPGHomedir
  If set, specifies the directory that will be used for GPG's homedir.
  This corresponds to gpg's --homedir option.  This variable is a Vim
  string. Default is unset.

g:GPGFilePattern
  If set, overrides the default set of file patterns that determine
  whether this plugin will be activated.  Defaults to
  '*.\(gpg\|asc\|pgp\)'.

==============================================================================
4. KNOWN ISSUES                                          *vim-gnugpg-issues*

In some cases gvim can't decrypt files

This is caused by the fact that a running gvim has no TTY and thus gpg is
not able to ask for the passphrase by itself. This is a problem for Windows
and Linux versions of gvim and could not be solved unless a "terminal
emulation" is implemented for gvim. To circumvent this you have to use any
combination of gpg-agent and a graphical pinentry program:

  - gpg-agent only:
      you need to provide the passphrase for the needed key to gpg-agent
      in a terminal before you open files with gvim which require this key.

  - pinentry only:
      you will get a popup window every time you open a file that needs to
      be decrypted.

  - gpgagent and pinentry:
      you will get a popup window the first time you open a file that
      needs to be decrypted.

If you're using Vim <7.4.959, after the plugin runs any external command,
Vim will no longer be able to yank to/paste from the X clipboard or
primary selections.  This is caused by a workaround for a different bug
where Vim no longer recognizes the key codes for keys such as the arrow
keys after running GnuPG.  See the discussion at
https://github.com/jamessan/vim-gnupg/issues/36 for more details.

==============================================================================
5. CREDITS                                               *vim-gnugpg-credits*

- Mathieu Clabaut for inspirations through his vimspell.vim script.
- Richard Bronosky for patch to enable ".pgp" suffix.
- Erik Remmelzwaal for patch to enable windows support and patient beta
  testing.
- Lars Becker for patch to make gpg2 working.
- Thomas Arendsen Hein for patch to convert encoding of gpg output.
- Karl-Heinz Ruskowski for patch to fix unknown recipients and trust model
  and patient beta testing.
- Giel van Schijndel for patch to get GPG_TTY dynamically.
- Sebastian Luettich for patch to fix issue with symmetric encryption an set
  recipients.
- Tim Swast for patch to generate signed files.
- James Vega for patches for better '*.asc' handling, better filename
  escaping and better handling of multiple keyrings.

vim:tw=78:et:ft=help.text:norl:
